// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uid    String     @id @default(uuid())
  email String  @unique
  password String
  profile Profile?
  store Store?
  userRole UserRole?
  @@map("users")
}

model Profile {
  uid    String     @id @default(uuid())
  name String 
  phoneNumber String @map("phone_number")
  picture String
  user User @relation(fields: [userUid], references: [uid])
  userUid String @unique @map("user_uid")
  userAddress UserAddress?
  @@map("profiles")
}

model UserAddress {
      uid    String     @id @default(uuid())
      provinsi String
      kota String
      kecamatan String
      kelurahan String
      fullAddress String @map("full_address")
      profile Profile @relation(fields: [profileUid], references: [uid])
      profileUid String @unique @map("profile_uid")
}

model UserRole {
    uid    String     @id @default(uuid())

  user User? @relation(fields: [userUid], references: [uid])
  role Role @relation(fields: [roleUid], references: [uid])
  userUid String  @map("user_uid") @unique
  roleUid String  @map("role_uid")

  @@map("user_roles")
}

model Role {
  uid    String     @id @default(uuid())
  name String @unique
  userRole UserRole[]
  @@map("roles")
}

model Store {
    uid    String     @id @default(uuid())
    user User @relation(fields: [userUid], references: [uid])
    userUid String @unique @map("user_uid")
    storeAddress StoreAddress?
    product Product[]

}

model StoreAddress {
      uid    String     @id @default(uuid())
      provinsi String
      kota String
      kecamatan String
      kelurahan String
      fullAddress String @map("full_address")
      store Store @relation(fields: [storeUid], references: [uid])
      storeUid String @unique @map("store_uid")
}

model Product {
    uid    String     @id @default(uuid())
    name String
    description String
    price Decimal
    stock Int
    isActive Boolean
    store Store @relation(fields: [storeUid], references: [uid])
    storeUid String @unique @map("store_uid")

}

// Description
// Category
// Brand
// Images
// Attributes
// Rating and Reviews
// Variants
// Tags
// Shipping Information
// Discounts and Promotions
// Related Products
// Availability